---
#
# This playbook will read the ports.yaml file in the same directory and configure the ports
# on the specified switch serial number in the Meraki cloud
#
- name: meraki query
  hosts: meraki
  vars:
    auth_key: "{{ auth }}"
    org_name: "{{ org }}"

  tasks:

    - name: include variables for devices
      ansible.builtin.include_vars:
        file: ports.yaml

    - name: Query Organization
      cisco.meraki.meraki_organization:
        auth_key: "{{ auth_key }}"
        org_name: "{{ org_name }}"
        state: query
      register: org_output

    - name: Add devices to Network
      cisco.meraki.meraki_ms_switchport:
        auth_key: "{{ auth_key }}"
        org_id: "{{ org_output.data.id }}"
        state: present
        serial: "{{ item.serial }}"
        number: "{{ item.number }}"
        enabled: true
        name: "{{ item.name }}"
        type: "{{ item.type | lower }}"
        vlan: "{{ item.vlan | default('1') }}"
        access_policy_number: "{{ item.access_policy_number | default(omit) }}"
        access_policy_type: "{{ item.access_policy_type }}"
        allowed_vlans: "{{ item.allowed_vlans }}"
        tags: "{{ item.tags }}"
        stp_guard: "{{ item.stp_guard | lower }}"
        poe_enabled: "{{ item.poe_enabled }}"
      loop: "{{ ports }}"
      loop_control:
        label: "starting task to configure port {{ item.number }} on switch {{ item.serial }}"
      register: port_configs
      async: 10800
      poll: 0

    - name: Wait for port configs to finish
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: config_job_results
      until: config_job_results.finished
      retries: 1080
      delay: 10
      loop: "{{ port_configs.results }}"
      loop_control:
        label: "finished configuring port {{ item.item.number }} on switch {{ item.item.serial }}"

    - name: Print successful result
      ansible.builtin.debug:
        msg: "All ports in ports.yaml configured successfully"

    - name: Clean up job cache
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
        mode: cleanup
      loop: "{{ port_configs.results }}"
      loop_control:
        label: "cache removed"
